# difference between fcntl and flock


## fcntl() (POSIX):

you create a lock record on the file at filesystem level including **process id**.

If the process dies or closes any filedescriptor to this file, the lock record gets removed by the system.

A request for an exclusive lock shall fail if the file descriptor was not opened with write access.

**simply: fnctl locks work as a Process <--> File relationship, ignoring filedescriptors**

## flock

flock could use for directory, but fcntl couldn't.

flock() (BSD) is different (Linux: since kernel 2.0, flock() is implemented as a system call in its own right rather than being emulated in the GNU C library as a call to fcntl):

flock() creates locks on systems's "Open file descriptions". "Open file descriptions" are generated by open() calls.

a filedescriptor (FD) is a reference to a "Open file description". FDs generated by dup() or fork() refer to the same "Open file description".

a process may generate multiple "Open file descriptions" for one file by opening() the file multiple times

flock() places it's locks via a FD on a "Open file description"

**therefore flock() may be used to synchronize file access among processes as well as threads (in one ore more processes).**

see flock(2) and especially open(2) man pages for details on "Open file descriptions".
